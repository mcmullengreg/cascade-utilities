[
{
	"uri": "https://mcmullengreg.github.io/cascade-utilities/svg-sprite/code/",
	"title": "Velocity Code",
	"tags": null,
	"description": "",
	"content": "The below script may be used as is, see svg-sprite for more details. Copy    #import(\u0026#34;_versioning/_defaults\u0026#34;) #set ( $icons = $_.locateFolder(\u0026#34;/global-assets/social-icons\u0026#34;, $framework.get(\u0026#34;site\u0026#34;)) ) \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; #foreach ( $icon in $icons.getChildren() )  #cleanSVG($icon) #end \u0026lt;/svg\u0026gt; #macro ( cleanSVG $icon )  #set ( $iconId = $icon.label.toLowerCase().replaceAll(\u0026#34;\\.\u0026#34;, \u0026#34;_\u0026#34; ) )  #set ( $icon = $icon.text )  #set ( $viewBox = \u0026#39;viewBox=\u0026#34;\u0026#39;) #set ( $startPos = $icon.indexOf($viewBox) ) #if ( $startPos \u0026gt; 0 ) #set ( $startPosExc = $startPos + $viewBox.length() ) #set ( $viewBoxValue = $icon.substring($startPosExc, $icon.indexOf(\u0026#39;\u0026#34;\u0026#39;, $startPosExc)) )  #end  #set ( $symbol = \u0026#39;\u0026lt;symbol viewBox=\u0026#34;\u0026#39; + ${viewBoxValue} + \u0026#39;\u0026#34; id=\u0026#34;\u0026#39;+ ${iconId} +\u0026#39;\u0026#34;\u0026#39; )  #set ( $icon = $icon.replaceAll(\u0026#34;\u0026lt;(/?)svg(.*\\s.*)?\u0026gt;\u0026#34;, \u0026#39;\u0026lt;$1symbol\u0026gt;\u0026#39;) )  #set ( $icon = $icon.replaceAll(\u0026#34;\u0026lt;title\u0026gt;(.*?)\u0026lt;/title\u0026gt;\u0026#34;, \u0026#34;\u0026#34;) )  #set ( $icon = $icon.replace(\u0026#34;\u0026lt;symbol\u0026#34;, $symbol) )  $icon #end    "
},
{
	"uri": "https://mcmullengreg.github.io/cascade-utilities/",
	"title": "Cascade Utilities",
	"tags": null,
	"description": "",
	"content": "Documentation for various utilities for use within Cascade CMS by Hannon Hill.\nYour mileage may vary when utilizing any of this code. Use at your own risk.\nCurrent Projects   SVG Sprites  A way to organize and inline your icons within a simple Cascade Folder. SVG Sprites Â»      "
},
{
	"uri": "https://mcmullengreg.github.io/cascade-utilities/categories/",
	"title": "Categories",
	"tags": null,
	"description": "",
	"content": ""
},
{
	"uri": "https://mcmullengreg.github.io/cascade-utilities/shortcodes/do_shortcode/",
	"title": "Do Shortcode",
	"tags": null,
	"description": "",
	"content": "do_shortcode is the most basic macro within the entire set. While there are ways to enhance this functionality, the below sample will get you started. Copy    #*  * Macro do_shortcode ( $shortcodeName, $content )  * Processes the actual shortcode, and attaches the macro to it *# #macro ( do_shortcode $shortcodeName, $content )  #if ( $shortcodeName.contains(\u0026#34;shortcodeName\u0026#34;) )  #shortcode($content)  ## This entry is an example, and should never be uncommented  ##elseif ( $shortcodeName.contains(\u0026#34;_template\u0026#34;) )  ##_template($content)  #else  #set ( $wysiwyg = $content )  ## I\u0026#39;m the else...I run if no shortcodes exist.  #end #end    "
},
{
	"uri": "https://mcmullengreg.github.io/cascade-utilities/shortcodes/default/",
	"title": "Find Codes",
	"tags": null,
	"description": "",
	"content": "The default file contains find_shortcode and a utility macro called strByStartEnd. find_shortcode is the actual workhorse, but wouldn\u0026rsquo;t be possible without the utility macro also included in this file. Copy    ## Import all known shortcode Formats #set ( $siteName = \u0026#34;YourSiteName\u0026#34; ) #set ( $folder = $_.locateFolder(\u0026#34;shortcodes\u0026#34;, $siteName) ) #set ( $codes = [] ) #set ( $shortcodes = [] ) ## Import the shortcode files #foreach ( $child as $folder.children )  #set ( $formatPath = \u0026#34;site://${siteName}/\u0026#34; + $child.path )  #if ( $child.name != \u0026#34;default\u0026#34; || $child.name != \u0026#34;_template\u0026#34; )  #import($formatPath)  #set ( $null = $codes.add($child.name) )  #end #end #macro ( findCodes $contentString )  #set ( $startPosPar = $contentString.indexOf(\u0026#39;[\u0026#39;) )  #if ( $startPosPar \u0026gt; 0 )  ## To avoid some conflicts, we replace the square brackets with curly here.  #set ( $scFull = \u0026#34;#strByStartEnd($contentString, \u0026#39;[\u0026#39;, \u0026#39;]\u0026#39;)\u0026#34; )  #set ( $scName = $scFull.split(\u0026#34;\\s\u0026#34;) )  #set ( $scName = $scName[0] )  #if ( $codes.contains($scName) )  #set ( $replace = \u0026#34;[\u0026#34;+$scFull+\u0026#34;]\u0026#34; )  #set ( $new = \u0026#34;{\u0026#34;+$scFull+\u0026#34;}\u0026#34; )  #set ( $contentReplace = $contentString.replace($replace,$new) )  #set ( $void = $shortcodes.add($new) )  #set ( $wysiwyg = $contentReplace )  #findCodes($wysiwyg)  #else  #foreach ( $item in $shortcodes )  #do_shortcode($item, $wysiwyg)  #end  #end  #else  #foreach ( $item in $shortcodes )  #do_shortcode($item, $wysiwyg)  #end  #end #end    Utility Macro Copy    #* Macro to get a substring by a start and end string, e.g.  Full String Start String End String Return  [getBlock settings] [getBlock ] settings  attribute=\u0026#34;your/path\u0026#34; attribute=\u0026#34; \u0026#34; your/path *# #macro ( strByStartEnd $contentString $startString $endString )  #set ( $startPos = $contentString.indexOf($startString) )  #if ( $startPos \u0026gt; 0 )  #set ( $startPosExc = $startPos + $startString.length() )  $contentString.substring($startPosExc, $contentString.indexOf($endString, $startPosExc))  #end #end    "
},
{
	"uri": "https://mcmullengreg.github.io/cascade-utilities/shortcodes/template/",
	"title": "Shortcode Template",
	"tags": null,
	"description": "",
	"content": "This template file breaks down the basic code necessary for writing your first macro. Copy    #*  This page serves as a template and guide to developing and/or editing new shortcodes  Shortcodes should all be stored inside of the same site and folder, e.g. /macros/shortcodes/{name}.   The shortcode, file and macro names should match exactly. The name is used as a check to:  1. Import the macro file  2. \u0026#34;Name\u0026#34; the macro itself  3. Trigger a check for which macro to run (inside of do_shortcode)   e.g. #macro form ; shortcode is [form id=\u0026#34;\u0026#34;]; filename is form   Basic structure:  - Import the find_shortcode file, this allows you to search for a named shortcode.  - Write your macro/shortcode  - Use $contentString (or similar) to pass in the wysiwyg editor content. This is all that\u0026#39;s needed to be passed in  - Ensure you write out to $wysiwyg at the end of it all (setting the WYSIWYG editor to $wysiwyg, regardless of DD name or structured data is ideal)  - Update do_shortcode with your new entry *#  #macro ( _template $contentString )  ## Gets the starting position of the shortcode  ## Uses the curly brace, due to processing occurring higher in the chain  #set ( $startPosPar = $contentString.indexOf(\u0026#39;{_template\u0026#39;) )  ## IndexOf uses -1 if an item is not found; 0 or above if it is  #if ( $startPosPar \u0026gt; 0 )  ## Uses the String by Start and End macro to get the start and end of the shortcode  #set ( $shortCode = \u0026#34;#strByStartEnd($contentString, \u0026#39;{form\u0026#39;, \u0026#39;}\u0026#39;)\u0026#34; )  ## Sets the index of the closing brace for the shortcode  #set ( $endPos = $contentString.indexOf(\u0026#39;}\u0026#39;, $startPosPar) )  #set ( $endPos = $endPos + 1 )  ## Gets the full shortcode entity for additional processing  #set ( $fullShortCode = $contentString.substring($startPosPar, $endPos) )  ## Start processing additional attributes (use as many as needed for your shortcode)  ## The ending attribute, typically a double quote (\u0026#34;) #set ( $endAtt = \u0026#39;\u0026#34;\u0026#39; )  ## Your attributes, could be done differently, but this ensures we know what we get  #set ( $attStart1 = \u0026#39;att1=\u0026#34;\u0026#39; ) #set ( $attVal1 = \u0026#34;#strByStartEnd($shortCode, $attStart1, $endAtt)\u0026#34; ) #set ( $attStart2 = \u0026#39;att2=\u0026#34;\u0026#39; )  #set ( $attVal2 = \u0026#34;#strByStartEnd($shortCode, $attStart2, $endAtt)\u0026#34; )  ## After getting all of your values, you can then start building whatever code is needed. It\u0026#39;s recommend that you build it as a string, and replace whatever values are needed.  ## The code {att1}, {att2} are placeholders for the real content we want dropped in.  #set ( $embedCode = \u0026#39;\u0026lt;div id=\u0026#34;{att1}\u0026#34;\u0026gt;{att2}\u0026lt;/div\u0026gt;\u0026#39; )  ## If you have multiple instances of a replace, use replaceAll  #set ( $embedCode = $embedCode.replace(\u0026#34;\\{att1\\}\u0026#34;, $attVal1) )  #set ( $embedCode = $embedCode.replace(\u0026#34;\\{att2\\}\u0026#34;, $attVal2) )  ## Replace the HTML content with your updated $embedCode  #set ( $wysiwyg = $contentString.replace($fullShortCode, $embedCode) )   ## Don\u0026#39;t forget to update do_shortcode with a new elseif entry  #else ## Nothing was found, just pass it through (ensures we don\u0026#39;t try to process something that doesn\u0026#39;t need it ). Also sets the $wysiwyg variable to be output on the desired content format  #set ( $wysiwyg = $contentString )  #end #end    "
},
{
	"uri": "https://mcmullengreg.github.io/cascade-utilities/shortcodes/",
	"title": "Shortcodes",
	"tags": null,
	"description": "",
	"content": "Shortcodes within Cascade CMS function similarly to those found in WordPress. The biggest difference is when they render.\nCascade CMS shortcodes will not automatically trigger in the WYSIWYG editor, but will once the page has been submitted from editing.\nHow to use Using a WYSIWYG editor, uses would type [shortcode var=\u0026quot;attribute\u0026quot;]. Following the template as a guide you can then process the WYSIWYG content to replace the shortcode with code that can use the variable. Such as:\n#macro ( shortcode $contentString )  ...  #set ( $attribute1 = #strByStartEnd($shortcode, \u0026#39;var=\u0026#34;, \u0026#39;\u0026#34;\u0026#39;) )  ## attribute1 would be \u0026#39;attribute\u0026#39; set within the shortcode  ...additional code... #end Use Cases  YouTube embeds: Instead of allowing users to embed content directly you can create a shortcode for how developers and brand ambassadors want these videos to be embedded on your site. Form embeds: Forms can be a nightmare, especially with Slate (for HighEdWebbers). Allow your users to only have to enter the form ID and you can handle the rest. Other Applications: Sometimes you just want to embed a Facebook post, Twitter feed or maybe process a CSV into an accessible table. This is what writing shortcodes can help with.  Code samples Do Shortcode   Find Codes   Shortcode Template    "
},
{
	"uri": "https://mcmullengreg.github.io/cascade-utilities/svg-sprite/",
	"title": "SVG Sprite",
	"tags": null,
	"description": "",
	"content": "This script helps take a folder of SVG files and combines them into a single SVG, to be used as a Sprite. The files can live anywhere on your site. In this example we are also using a default object called $framework to pull in the location of the framework site and/or folder. Sample Structure Site://Name â ââââimages â ââââicons â â file.svg â â file2.svg â â ... â ââââformats  ââââsvg-sprite.vm Usage Setup your template to utilize this format as a region, or import it as you see fit. The first variable finds the location of the SVGs to build out the sprite. Set your default site as you see fit.\n#set ( $icons = $_.locateFolder(\u0026#34;/path-to/svgs\u0026#34;, $svgSite) ) We then loop through the children and utilize the #cleanSVG() macro to clean the SVG items, customize as you see fit, ensuring we keep the viewBox while swapping the svg element for symbol.\nAt the moment, SVG\u0026rsquo;s should be placed into your Cascade CMS instance without comments. Comments are not filtered out, but could be added to the list in your installation.\nID\u0026rsquo;s of the SVG sprite are based on the assets .label, lcased. Filenames are not stripped if Display Name or Title are not used. Therefore the default name could be icon-name-svg.\nExample SVG \u0026lt;svg xmlns=\u0026#34;***\u0026#34; viewBox=\u0026#34;***\u0026#34; ...\u0026gt;  \u0026lt;path|group|etc\u0026gt; \u0026lt;/svg\u0026gt; Using the Sprite To use the sprite, you\u0026rsquo;ll use the \u0026lt;use xlink:href=\u0026quot;#icon-name\u0026quot;\u0026gt;\u0026lt;/use\u0026gt;. Cascade CMS doesn\u0026rsquo;t like this code, so make sure to wrap it with a #protect.\n\u0026lt;svg class=\u0026#34;whatever\u0026#34;\u0026gt;  \u0026lt;!--#protect\u0026lt;use xlink:href=\u0026#34;#icon-name\u0026#34;\u0026gt;\u0026lt;/use\u0026gt;#protect--\u0026gt; \u0026lt;/svg\u0026gt; Resources  A Pretty Good SVG Icon System Inline SVG\u0026hellip;Cached Why Inline SVG is Best SVG How to Use SVG Image Sprites 5 Gotchas You\u0026rsquo;re Gonna Face Getting Inline SVG Into Production  "
},
{
	"uri": "https://mcmullengreg.github.io/cascade-utilities/tags/",
	"title": "Tags",
	"tags": null,
	"description": "",
	"content": ""
}]
